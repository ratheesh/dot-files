" Copyright (C) 2018  Ratheesh <ratheeshreddy@gmail.com>
" Author: Ratheesh <ratheeshreddy@gmail.com>
"
" This program is free software; you can redistribute it and/or
" modify it under the terms of the GNU General Public License
" as published by the Free Software Foundation; either version 2
" of the License, or (at your option) any later version.
"
" This program is distributed in the hope that it will be useful,
" but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
" GNU General Public License for more details.
"
" You should have received a copy of the GNU General Public License
" along with this program.  If not, see <http://www.gnu.org/licenses/>.

" Bootstrap settings {{{
" set nocompatible               " be iMproved
if &compatible | set nocompatible | endif
set hidden
filetype off                  " required!

" Install vimplug if it is not already installed
" Source: https://github.com/her/dotfiles/blob/master/vimrc

if empty(glob('~/.vim/autoload/plug.vim'))
    if !executable("curl")
        echoerr "You have to install curl or first install vim-plug yourself!"
        execute "q!"
    endif
  silent execute "!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" disable shallow cloning
let g:plug_shallow=0
"}}}

" Plugins {{{
call plug#begin('$HOME/.vim/plugged')

Plug 'junegunn/fzf', {'branch': 'master' ,'dir': '$HOME/.fzf', 'do': './install --all' }
Plug 'junegunn/vim-easy-align', { 'on': '<plug>(LiveEasyAlign)' }
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-surround'
Plug 't9md/vim-textmanip'
Plug 'tpope/vim-capslock'
" Plug 'w0rp/ale' " This requires vim > v.8.0 with +timers +job +channel
Plug 'ratheesh/vim-smooth-scroll'
Plug 'liuchengxu/vim-which-key'
" The Rust extension will only be installed if cargo is available.
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
" Plug 'junegunn/fzf.vim'
Plug 'brookhong/cscope.vim'
Plug 'majutsushi/tagbar'
Plug 'sjl/gundo.vim'
" Plug 'matze/vim-move'
Plug 't9md/vim-smalls'
" Plug 'junegunn/vim-slash'
Plug 'bootleq/vim-cycle', { 'as': 'bootleq_vim-cycle' }
Plug 'godlygeek/tabular'
Plug 'thaerkh/vim-indentguides'
" Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'tpope/vim-git', { 'for':'gitcommit' }
Plug 'airblade/vim-gitgutter'
Plug 'ratheesh/git_patch_tags.vim', { 'for':'gitcommit' }
" Plug 'kdheepak/lazygit.vim'
" Plug 'ryanoasis/vim-devicons'
Plug 'kyazdani42/nvim-web-devicons'
" Plug 'coreyja/fzf.devicon.vim'
Plug 'datwaft/bubbly.nvim'
Plug 'romgrk/barbar.nvim'
Plug 'mhinz/vim-signify'
" Plug 'delphinus/vim-auto-cursorline'
Plug 'osyo-manga/vim-anzu'
Plug 'ratheesh/vim-extended-ft'
Plug 'MaxMEllon/vim-shiny'
Plug 'machakann/vim-highlightedyank'
Plug 'machakann/vim-highlightedundo'
Plug 'machakann/vim-sandwich'
Plug 'ckarnell/Antonys-macro-repeater'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-commentary'
Plug 'ntpeters/vim-better-whitespace'
" Plug 'tweekmonster/wstrip.vim'
" Plug 'axelf4/vim-strip-trailing-whitespace'
Plug 'terryma/vim-expand-region'
Plug 'antoyo/vim-licenses'
Plug 'kshenoy/vim-signature'
Plug 'ratheesh/hiPairs'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
" Plug 'rhysd/endwize.vim'
Plug 'ratheesh/vim-c-slash', {'for': ['c', 'cpp', 'cxx', 'cmake', 'clang']}
if has('nvim')
    Plug 'IMOKURI/line-number-interval.nvim'
    Plug 'lambdalisue/suda.vim'
endif
Plug 'python-mode/python-mode', {'branch': 'develop', 'for': 'python'}
Plug 'tweekmonster/braceless.vim', { 'for': 'python'}
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'rhysd/git-messenger.vim'
Plug 'lilydjwg/colorizer'
Plug 'ratheesh/yankmatches'
Plug 'junegunn/vim-peekaboo'
if !has('nvim')
    Plug 'greymd/oscyank.vim' " Currently, this works only in ViM
endif " if
Plug 'dhruvasagar/vim-table-mode'
if has('nvim')
    " Plug 'voldikss/vim-floaterm'
    Plug 'gelguy/wilder.nvim',         { 'do': ':UpdateRemotePlugins' }
else
    Plug 'gelguy/Cmd2.vim'
endif " if
Plug 'andymass/vim-matchup'
Plug 'fvictorio/vim-yank-queue'

Plug 'kana/vim-submode'
" Custom text objects related
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-operator-user'
Plug 'kana/vim-textobj-function'
Plug 'rhysd/vim-textobj-anyblock'
Plug 'FooSoft/vim-argwrap'
Plug 'augustold/vim-custom-surround'
Plug 'kana/vim-textobj-line'
Plug 'junegunn/vim-after-object'
" Plug 'glts/vim-textobj-comment'
Plug 'machakann/vim-swap' " to swap args
Plug 'PeterRincker/vim-argumentative' " (c/d/v)(i/a),
Plug 'tommcdo/vim-exchange' " exchange regions
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'haya14busa/vim-operator-flashy'
Plug 'idbrii/textobj-word-column.vim'

" writing prose
Plug 'reedes/vim-pencil'
Plug 'reedes/vim-colors-pencil'
Plug 'ratheesh/vim-airline-formatting'
Plug 'reedes/vim-textobj-sentence'
Plug 'reedes/vim-lexical'
Plug 'reedes/vim-textobj-quote'
Plug 'beloglazov/vim-online-thesaurus'

" Plug 'autozimu/LanguageClient-neovim', {
"             \ 'branch': 'next',
"             \ 'do': 'bash install.sh',
"             \ }

Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/diagnostic-nvim'
Plug 'nvim-lua/completion-nvim'

Plug 'wellle/tmux-complete.vim'

" Shougo's plugins
Plug 'Shougo/echodoc.vim'
if has('nvim')
    Plug 'Shougo/deoplete.nvim',         { 'do': ':UpdateRemotePlugins' }
    Plug 'Shougo/denite.nvim',           { 'do': ':UpdateRemotePlugins' }
    Plug 'ncm2/float-preview.nvim',      { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'Shougo/denite.nvim'

    " Following are required for deoplete to work in ViM
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'Shougo/neco-syntax'
" Plug 'deoplete-plugins/deoplete-jedi'
Plug 'deoplete-plugins/deoplete-tag'
Plug 'deathlyfrantic/deoplete-spell', {'branch': 'main'}
" Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
Plug 'Shougo/deoplete-lsp'

" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Run $ go get -u github.com/stamblerre/gocode for below plugin to work properly
" Plug 'stamblerre/gocode', { 'rtp': 'nvim', 'do': '$HOME/.vim/plugged/gocode/nvim/symlink.sh' }
" Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}

" Under testing plugins
Plug 'kvngvikram/rightclick-macros'

call plug#end()

" Install missing or new plugins on startup
autocmd VimEnter *
            \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \|   PlugInstall --sync | q
            \| endif

"}}}

" ViM generic settings {{{
syntax   on
filetype on
filetype plugin indent on
set number relativenumber
if !has('nvim')
    set noesckeys
    if v:version >= 800
        " packadd! matchit
    else
        " runtime macros/matchit.vim
    endif
endif

set nostartofline
set numberwidth=1
" set tabstop=4
" set matchpairs+=<:>
" set whichwrap=<,>,h,l
set whichwrap=<,>,[,]
set showmatch
" set matchtime=4
" set colorcolumn=81
" execute "set colorcolumn=" . join(range(81,335), ',')
" set columns=80
set ruler
set nofoldenable    " disable folding
set display=lastline
if has('wildmenu')
    set nowildmenu
    set wildmode=list:longest,full
    if has('nvim')
        set wildoptions=pum
    else
        set wildoptions=tagfile
    endif " if nvim
    set wildignorecase
    set wildignore+=.git,.hg,.svn,.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
    set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
    set wildignore+=**/node_modules/**,**/bower_modules/**,*/.sass-cache/*
    set wildignore+=application/vendor/**,**/vendor/ckeditor/**,media/vendor/**
    set wildignore+=__pycache__,*.egg-info
endif
" Abbreviations of messages and avoid 'hit enter' prompt
set shortmess+=aoOtTIc
" Complete options
set completeopt=noinsert,menuone,noselect
" Ask for confirmation (instead of aborting an action)
set confirm
" Shorten default to time to update swap files and gutter plugins
set updatetime=150
" Time in milliseconds waited for a mapping to complete
set timeout
set timeoutlen=700
" Time in milliseconds waited for a key code to complete
set ttimeout
set ttimeoutlen=0
set wildmenu
set fileformats=unix,dos,mac
set virtualedit=block

" What to save for views:
set viewoptions-=options
set viewoptions+=slash,unix
set viewoptions=cursor,folds,unix,slash,curdir
set viewdir=$CACHE/tmp/view
set ignorecase
set nojoinspaces
set smartcase
set smarttab
set gdefault
set magic
set hlsearch
set incsearch
set history=1000
" Show filename and path in window title (even in terminal)
set title
set showcmd
set nowrap
set backspace=indent,eol,start
set autoindent
set autoread
set autowrite
set cursorline
set linebreak
if has('linebreak')
    try
        set breakindent
        let &showbreak='↪ '
    catch /E518:/
        " Unknown option: breakindent
    endtry
endif
set cpoptions+=n
" $ for change command instead of deleting word then insert
set cpoptions+=$

set hidden   " See http://items.sjbach.com/319/configuring-vim-right
set winminheight=0    " Windows need not have height
set foldmethod=marker
set lazyredraw " don't redraw while executing macros
" set copyindent
if has('clipboard')
    if has('nvim')
        set clipboard+=unnamedplus
    else
        set clipboard& clipboard+=unnamed
        set clipboard-=autoselect
    endif
endif
set encoding=utf-8
set scrolloff=5       " Show next 3 lines while scrolling.
set sidescrolloff=5   " Show next 5 columns while side-scrolling.
set laststatus=2
if !has('gui_running')
    set t_Co=256  " Support for 256 colors
endif
set noshowmode

set modeline
set modelines=5

set showtabline=2
" set fillchars="vert:\│,fold:-"
set fillchars+=vert:\│,fold:-
set list
" set listchars=eol:¬,trail:·,extends:❯,precedes:❮
" set listchars=trail:·,extends:❯,precedes:❮
set listchars=tab:¦\ ,nbsp:␣,trail:•,extends:⟩,precedes:⟨
set fillchars+=diff:⣿
set completeopt+=preview
set cscopetag

" Spell checking
setglobal spell spelllang=en_us
" By default spelling is off...
" set nospell
" ...but enable it for the English text files I use a lot.
au BufRead,BufNewFile,BufWrite *.txt,*.tex,*.latex set spell
au BufRead,BufNewFile,BufWrite *.exp,*.c,*.sh,*shrc setlocal nospell

" Set scroll margin to 0 in git commit buffers to avoid cursor in non-zero pos
" au BufRead,BufNewFile,BufWrite *.stgit*,COMMIT_EDITMSG set scrolloff=0

set ttyfast

" Text formatting options
set formatoptions+=1
set formatoptions+=c  " Autowrap comments using textwidth
set formatoptions+=j  " Delete comment character when joining commented lines
set formatoptions+=l  " do not wrap lines that have been longer when starting insert mode already
set formatoptions+=n  " Recognize numbered lists
set formatoptions+=o  " Insert comment leader after hitting o or O in normal mode
set formatoptions+=q  " Allow formatting of comments with "gq".
set formatoptions+=r  " Insert comment leader after hitting <Enter>
" set formatoptions+=t  " Auto-wrap text using textwidth"

" disable bracketed paste!
" This causes issues with pasting using shift-Insert
" set t_BE=

if (has('nvim'))
    " show results of substition as they're happening but don't open a split
    set inccommand=nosplit
endif
set splitbelow
set splitright

augroup bufrd
    autocmd!
    "Remember the positions in files with some git-specific exceptions"
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$")
                \           && expand("%") !~ "COMMIT_EDITMSG"
                \           && expand("%") !~ "MERGE_EDITMSG"
                \           && expand("%") !~ "ADD_EDIT.patch"
                \           && expand("%") !~ "addp-hunk-edit.diff"
                \           && expand("%") !~ "git-rebase-todo" |
                \   exe "normal g`\"" |
                \ endif

    autocmd BufWritePost
                \ * if &l:filetype ==# '' || exists('b:ftdetect')
                \ |   unlet! b:ftdetect
                \ |   filetype detect
                \ | endif
augroup END

augroup vimrc-sync-onstart
    autocmd!
    autocmd BufEnter * :syntax sync maxlines=200
augroup END

let mapleader      = "\<Space>"
let maplocalleader = "\\"
" }}}

" General Config {{{
" Create temporary files
if !isdirectory($HOME.'/.vim/tmp') && exists('*mkdir')
    call mkdir($HOME.'/.vim/tmp')
endif

if has("persistent_undo")
    set undofile
    set undolevels=500   " Maximum number of changes that can be undone
    set undoreload=200   " Maximum number lines to save for undo on a buffer reload
    set undodir=$HOME/.vim/tmp/undotree/
    if !isdirectory(&undodir)
        call mkdir(&undodir)
    endif
endif

set backup
set backupdir=$HOME/.vim/tmp/backup/
set backupext=-vimbackup
set backupskip=
if !isdirectory(&backupdir)
    call mkdir(&backupdir)
endif
set writebackup

" swap files
set directory   =$HOME/.vim/tmp/swap//
if !isdirectory(&directory)
    call mkdir(&directory)
endif
set updatecount=100

" viminfo settings
if has('nvim')
    "  ShaDa/viminfo:
    "   ' - Maximum number of previously edited files marks
    "   < - Maximum number of lines saved for each register
    "   @ - Maximum number of items in the input-line history to be
    "   s - Maximum size of an item contents in KiB
    "   h - Disable the effect of 'hlsearch' when loading the shada
    "   set shada='50,s100,n$XDG_CACHE_HOME/nvim/shada
    " set viminfo=%,<800,'300,/50,<1000,:100,s100,h,f1,n$HOME/.config/nvim/viminfo
    set shada=%,<300,'100,/10,:100,s100,h,f1,n$HOME/.config/nvim/shada.info
    " autocmd VimLeave * wshada!
else
    set viminfo=%,<300,'100,/10,:100,s100,h,f1,n$HOME/.vim/tmp/viminfo
endif

" hooks
" Relative linenumbers disabled in insertmode
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

" highlight command mode text
if !has('nvim')
    hi Normal  ctermfg=7  ctermbg=233  cterm=NONE guifg=#cccccc guibg=#1a1a1a gui=NONE
    au CmdLineEnter * hi Normal ctermfg=2
    au CmdLineLeave * hi Normal ctermfg=253
endif

" Set default file types for specific file names
autocmd VimEnter COMMIT_EDITMSG if getline(1) == '' | execute 1 | startinsert | endif
autocmd BufRead,BufNew,BufNewFile gitconfig setlocal ft=gitconfig " git config file
autocmd BufRead,BufNew,BufNewFile *.md,*.markdown,*.mkd setlocal ft=markdown
autocmd BufRead,BufNew,BufNewFile *.c,*.cpp,*.h,*.txt execute "set colorcolumn=" . join(range(81,335), ',')

" close Quickfix/Locationlist when file is selected
" autocmd FileType qf nmap <buffer> <CR> <CR>:lclose<CR>

" Save when buffer command takes one to another file and when losing focus
augroup focus_lost
    au!
    au FocusLost * silent! wall
augroup END

augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter   * setlocal cursorline
    au VimLeave,WinLeave,BufWinLeave   * setlocal nocursorline
augroup END

" Little welcome message!
" autocmd VimEnter * echo "Willkommen zu meinem ViM Welt! (^-^)"
autocmd VimEnter * set noshowmode
autocmd VimEnter * set showcmd
autocmd VimEnter * set wrap

" Treat c-header as C source file type
autocmd BufNewFile,BufRead .h set filetype=ch

" keybindings
" disable arrow key navigation to break bad habit
nnoremap <Up>      <NOP>
nnoremap <Down>    <NOP>
nnoremap <Left>    <NOP>
nnoremap <Right>   <NOP>
xnoremap <Up>      <NOP>
xnoremap <Down>    <NOP>
xnoremap <Left>    <NOP>
xnoremap <Right>   <NOP>
inoremap <Up>      <NOP>
inoremap <Down>    <NOP>
inoremap <Left>    <NOP>
inoremap <Right>   <NOP>

" set pastetoggle=<F2> " Paste mode to avoid indented paste
" nmap <Leader><Leader> :
" imap jj <Esc>
imap <Esc> l
" vmap <Esc> l
inoremap jj l
nnoremap K i<CR><Esc>
" vnoremap jj l

" select lasted pasted text
noremap gV `[v`]
noremap Y y$

" swap ' and ` for easy marks navigation
nnoremap ' `
nnoremap ` '
xnoremap ' `
xnoremap ` '

" search partials
nnoremap * g*
nnoremap # g#

if has('nvim')
    nnoremap <silent><Leader>so     :source $HOME/.config/nvim/init.vim<CR>
else
    nnoremap <silent><Leader>so     :source $MYVIMRC<CR>
endif
nnoremap <silent><Leader>w      :w<CR>
" nnoremap <silent><Leader>ws     :w !sudo tee %
nnoremap <silent><Leader>x      :x<CR>
nnoremap <silent><Leader>qq     :q<CR>
nnoremap <silent><Leader>qn     :q!<CR>
" close preview
nnoremap <silent><Leader>cp     :pclose<CR>
" close locationlist
nnoremap <silent><Leader>cl     :lcl<CR>
" close quickfix
nnoremap <silent><Leader>cq     :ccl<CR>

" map up/down in command mode to C-p/C-u
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>

" navigate naturally even with wrapped lines
noremap  <silent><expr> j (v:count == 0 ? 'gj' : 'j')
noremap  <silent><expr> k (v:count == 0 ? 'gk' : 'k')

xnoremap <silent><expr> j  mode() ==# "v" ? "gj" : "j"
xnoremap <silent><expr> gj mode() ==# "v" ? "j"  : "gj"
xnoremap <silent><expr> k  mode() ==# "v" ? "gk" : "k"
xnoremap <silent><expr> gk mode() ==# "v" ? "k"  : "gk"

" Increment selected range based on the normal/line or in visual block mode
" xnoremap <silent><expr> <C-a> mode() ==# "\<C-V>" ? "g\<c-a>"  : "\<c-a>"

" Don't lose deleted text in insert mode <C-u>
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

nnoremap <silent><CR>   :call append(line('.'), '')<CR>
nnoremap <silent><M-CR> :call append(line('.')-1, '')<CR>

" redraw screen
" nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l><Paste>

" disable audio and visual bells
set noerrorbells
set novisualbell
set belloff=all
set t_vb=

" Write current buffer with sudo privileges
" nnoremap <silent><Leader>sw     :w !sudo tee % &> /dev/null<CR>
if !has('nvim')
    " Force saving files that require root permission
    command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!
else
    command! W :w suda://%
    command! E :e suda://%
endif

" Move across vim split Windows
if has('nvim')
    map <M-j> <C-W>j
    map <M-k> <C-W>k
    map <M-h> <C-W>h
    map <M-l> <C-W>l
else
    map j <C-W>j
    map k <C-W>k
    map h <C-W>h
    map l <C-W>l
endif

" Increase/decrease size and width (left, down, up and right) using ctrl-alt
nnoremap <C-A-h> <C-w>2<
nnoremap <C-A-j> <C-w>2+
nnoremap <C-A-k> <C-w>2-
nnoremap <C-A-l> <C-w>2>

" Horizontal and vertical splits
nnoremap <silent><Leader>sp :split<CR>
nnoremap <silent><Leader>vs :vsplit<CR>

" Make current window the only one on screen
nnoremap <A-o> <C-w>ozv

" nnoremap <Leader>j :
nmap <silent><Leader><Leader> V
xmap <silent><Leader><Leader> V
nmap <silent><Leader><BS> <c-v>
xmap <silent><Leader><BS> <c-v>
nmap <Leader>; :
xmap <Leader>; :

" nnoremap <F9>                  :bprev<CR>
" nnoremap <F10>                 :bnext<CR>
noremap <F4>                    :echo expand('%:p')<CR>
nnoremap <silent><Leader>bd     :bdelete<CR>
" nnoremap <silent><BS>           :nohlsearch<CR>
nnoremap <silent><Leader>bh     :Startify<CR>
" nnoremap <silent><Leader><Tab>  :b#<CR>
" nnoremap <Leader>[        :let @+ = expand("%")<CR>

" visual indentation (does not exit Visual mode after indentation)
" make shift+tab and tab indent
xnoremap > >gv
xnoremap < <gv
" imap <S-Tab> <C-o><<

" Toggle keybindings
" set pastetoggle=<Leader>tp
" nnoremap <silent><Leader>tg :GitGutterSignsToggle<CR>
" nnoremap <silent><Leader>ta :ALEToggle<CR>
" nnoremap <silent><Leader>ts :SignatureToggleSigns<CR>

" folding
" Close all folds and open and focus on fold containing current line
nnoremap <silent><Leader>z zMzvzz
" Make zm and zr work as zM and zR respectively
nnoremap zm zM
nnoremap zr zR

" Use <tab> to move between bracket pairs (related to matchit plugin)
" map <tab> %

"spell suggestion in a popup
nnoremap \s ea<C-X><C-S>
" }}}

" Plugins Customization

" Theme {{{
syntax on
let g:enable_bold_font = 1
color darktheme
" }}}

" vim-clap {{{
let g:clap_spinner_frames =  ["●••", "•●•", "••●"]
" let g:clap_prompt_format = ''
" let g:clap_default_external_filter = 'fzf'
let g:clap_insert_mode_only = 1

" let g:clap_current_selection_sign_definition='➤'
let g:clap_multi_selection_warning_silent = 1
let g:clap_current_selection_sign = { 'text': '➢', 'texthl': "ClapCurrentSelectedSign", "linehl": "ClapCurrentSelection" }
let g:clap_selected_sign  = { 'text': ' •', 'texthl': "ClapSelectedSign", "linehl": "ClapSelected" }
let g:clap_open_action    = { 'ctrl-t': 'tab split', 'ctrl-x': 'split', 'ctrl-v': 'vsplit' }
let g:clap_no_matches_msg = 'Keine Gleiche gefunden'

" grep options
let g:clap_provider_grep_executable  = 'rg'
let g:clap_provider_grep_opts        = '-H --no-heading --vimgrep --smart-case --hidden'
let g:clap_provider_grep_delay       = 500
let g:clap_provider_grep_blink       = [1, 200]
let g:clap_provider_grep_enable_icon = 0

" Yank provider
let g:clap_enable_yanks_provider      = 1
let g:clap_provider_yanks_max_entries = 30
let g:clap_provider_yanks_min_len     = 3

" Beautify clap input window
let g:clap_search_box_border_symbols = { 'arrow': ["\ue0b2", "\ue0b0"], 'curve': ["\ue0b6", "\ue0b4"], 'nil': ['', ''] }
let g:clap_search_box_border_style   = 'curve'

function! ClapEnter() abort
  call g:clap.display.setbufvar_batch({
        \ '&wrap'           : 0,
        \ '&number'         : 0,
        \ '&relativenumber' : 0,
        \ '&cursorline'     : 1,
        \ '&signcolumn'     : 'yes',
        \ '&spell'          : 0,
        \ '&colorcolumn'    : 0,
        \ })
endfunction " function

function! ClapExit() abort
endfunction

augroup ClapGrp
    autocmd!
    autocmd User ClapOnEnter   call ClapEnter()
    autocmd User ClapOnExit    call ClapExit()
augroup END

" Clap quick_open to open some dotfiles quickly.
let g:clap_provider_quick_open = {
      \ 'source': [
      \ '$HOME/.vim/vimrc',
      \ '$HOME/.zshrc',
      \ '$HOME/.tmux.conf'
      \ ],
      \ 'sink': 'e',
      \ }

nnoremap <silent><Leader>fo :Clap files --hidden<CR>
nnoremap <silent><Leader>fb :Clap buffers<CR>
nnoremap <silent><Leader>fr :Clap history<CR>
nnoremap <silent><Leader>fl :Clap blines<CR>
nnoremap <silent><Leader>/  :Clap grep<CR>
nnoremap <silent><Leader>d/  :Clap grep ++query=<cword>
nnoremap <silent><Leader>fm :Clap marks<CR>
nnoremap <silent><Leader>fh :Clap command_history<CR>
nnoremap <silent><Leader>fy :Clap yanks<CR>
nnoremap <silent><Leader>fw :Clap quick_open<CR>

" }}}

"fzf.vim {{{

" function! CreateCenteredFloatingWindow()
"     let width = min([&columns - 4, max([80, &columns - 20])])
"     let height = min([&lines - 4, max([20, &lines - 10])])
"     let top = ((&lines - height) / 2) - 1
"     let left = (&columns - width) / 2
"     let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

"     let top = "╭" . repeat("╍", width - 2) . "╮"
"     let mid = "┇" . repeat(" ", width - 2) . "┇"
"     let bot = "╰" . repeat("╍", width - 2) . "╯"
"     let lines = [top] + repeat([mid], height - 2) + [bot]
"     let s:buf = nvim_create_buf(v:false, v:true)
"     call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
"     call nvim_open_win(s:buf, v:true, opts)
"     set winhl=Normal:Floating
"     let opts.row += 1
"     let opts.height -= 2
"     let opts.col += 2
"     let opts.width -= 4
"     call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
"     au BufWipeout <buffer> exe 'bw '.s:buf
" endfunction
" " let g:fzf_layout = { 'window': 'call CreateCenteredFloatingWindow()' }

" " [Buffers] Jump to the existing window if possible
" let g:fzf_buffers_jump = 1

" " [[B]Commits] Customize the options used by 'git log':
" let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" " [Tags] Command to generate tags file
" let g:fzf_tags_command = 'ctags -R'

" " [Commands] --expect expression for directly executing the command
" let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" let g:fzf_colors =
"       \ {
"       \ 'fg': ['fg', 'FZFMain'],
"       \ 'bg': ['bg', 'FZFMain'],
"       \ 'fg+': ['fg', 'FZFCurrentLn'],
"       \ 'bg+': ['bg', 'FZFCurrentLn'],
"       \ 'hl+': ['fg', 'FZFHighlightCurLn'],
"       \ 'info': ['fg', 'FZFInfo'],
"       \ 'border': ['fg', 'FZFBorder'],
"       \ 'pointer': ['fg', 'FZFPointer'],
"       \ 'marker': ['fg', 'FZFMarker'],
"       \ 'spinner': ['bg', 'FZFSpinner'],
"       \ 'header': ['bg', 'FZFHeader'],
"       \ }

" nnoremap <silent><Leader>fo :GFiles<CR>
" nnoremap <silent><Leader>fb :Buffers<CR>
" nnoremap <silent><Leader>fr :History<CR>
" nnoremap <silent><Leader>fl :Blines<CR>
" nnoremap <silent><Leader>/  :Grep<CR>
" nnoremap <silent><Leader>fm :Marks<CR>
" nnoremap <silent><Leader>fy :yanks<CR>
" nnoremap <silent><Leader>fT :Tags<CR>
" nnoremap <silent><Leader>ft :BTags<CR>
" " nnoremap <silent><Leader>fy :yanks<CR>
" " nnoremap <silent><Leader>fw :quick_open<CR>

" function! GetJumps()
"   redir => cout
"   silent jumps
"   redir END
"   return reverse(split(cout, "\n")[1:])
" endfunction

" function! GoToJump(jump)
"   let jumpnumber = split(a:jump, '\s\+')[0]
"   execute "normal " . jumpnumber . "\<c-o>"
" endfunction

" command! Jumps call fzf#run(fzf#wrap({
"       \ 'source': GetJumps(),
"       \ 'sink': function('GoToJump')}))

"}}}

" Tagbar {{{
let g:tagbar_sort             = 0 " don't sort items by name
let g:tagbar_indent           = 1
let g:tagbar_expand           = 0
let g:tagbar_show_linenumbers = 0
let g:tagbar_autoshowtag      = 1
nnoremap <silent><F8>            :TagbarToggle<CR>
" nnoremap <silent><leader>tt  :TagbarOpenAutoClose<CR>

let g:tagbar_type_go = {
            \ 'ctagstype'  : 'go',
            \ 'kinds'      : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro'        : '.',
            \ 'kind2scope' : {
            \ 't'          : 'ctype',
            \ 'n'          : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype'      : 't',
            \ 'ntype'      : 'n'
            \ },
            \ 'ctagsbin'   : 'gotags',
            \ 'ctagsargs'  : '-sort -silent'
            \ }
" }}}

"vim-cycle {{{
let g:cycle_no_mappings = 1
nmap  <silent>- <Plug>CycleNext
nmap  <silent>+ <Plug>CyclePrev

let g:cycle_default_groups_for_c = [
            \ [[ 'unsigned', 'signed', 'register' ]],
            \ [[ 'char',  'short', 'int', 'long', 'void' ]],
            \ [[ 'u8',  'u16', 'u32', 'u64' ]],
            \ [[ 'uint8_t',  'uint16_t', 'uint32_t', 'uint64_t', 'size_t' ]],
            \ [[ 'SINT8', 'SINT16', 'SINT32', 'SINT64' ]],
            \ [[ 'UINT8', 'UINT16', 'UINT32', 'UINT64' ]],
            \ [[ '>>', '<<' ]],
            \ [[ '=>>', '<<=' ]],
            \ [[ '&&', '||' ]],
            \ [[ '>=', '<=' ]],
            \ [[ '->', '.'  ]],
            \ ]

let g:cycle_default_groups_for_cpp = [
            \ [[ 'unsigned', 'signed', 'register' ]],
            \ [[ 'bool', 'char',  'short', 'int', 'long' ]],
            \ [[ 'u8',  'u16', 'u32', 'u64' ]],
            \ [[ 'uint8_t',  'uint16_t', 'uint32_t', 'uint64_t', 'size_t' ]],
            \ [[ 'SINT8', 'SINT16', 'SINT32', 'SINT64' ]],
            \ [[ 'UINT8', 'UINT16', 'UINT32', 'UINT64' ]],
            \ [[ '>>', '<<' ]],
            \ [[ '=>>', '<<=' ]],
            \ [[ '&&', '||' ]],
            \ [[ '>=', '<=' ]],
            \ [[ '->', '.'  ]],
            \ ]

let g:cycle_default_groups_for_python = [
            \ [[ 'if', 'elseif', 'else', 'endif' ]],
            \ ]

let g:cycle_default_groups_for_sh = [
            \ [[ 'eq', 'gt', 'lt', 'le', 'ge' ]],
            \ [[ '&&', '||' ]],
            \ [[ '>=', '<=' ]],
            \ [[ '>>', '<<' ]],
            \ [[ '=>>', '<<=' ]],
            \ [[ '-n', '-z' ]],
            \ ]

let g:cycle_default_groups_for_gitrebase = [
            \ [[ 'pick', 'fixup', 'reword', 'edit', 'squash', 'drop' ]],
            \ ]

let g:cycle_default_groups = [
            \ [[ 'true', 'false' ]],
            \ [[ 'yes', 'no' ]],
            \ [[ 'on', 'off' ]],
            \ [[ 'allow', 'deny' ]],
            \ [[ 'before', 'after' ]],
            \ [[ 'block', 'inline', 'none' ]],
            \ [[ 'define', 'undef' ]],
            \ [[ 'good', 'bad' ]],
            \ [[ 'in', 'out' ]],
            \ [[ 'left', 'right' ]],
            \ [[ 'min', 'max' ]],
            \ [[ 'on', 'off' ]],
            \ [[ 'start', 'stop' ]],
            \ [[ 'enable', 'disable' ]],
            \ [[ 'success', 'failure' ]],
            \ [[ 'up', 'down' ]],
            \ [[ 'left', 'right' ]],
            \ [[ 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday',
            \    'friday', 'saturday' ]],
            \ [[ 'january', 'february', 'march', 'april', 'may', 'june', 'july',
            \    'august', 'september', 'october', 'november', 'december' ]],
            \ [[ '0', '1' ]],
            \ [[ '+', '-' ]],
            \ [[ '}', '{' ]],
            \ [[ ')', '(' ]],
            \ [[ ']', '[' ]],
            \ [[ '>', '<' ]],
            \ [[ '&', '|' ]],
            \ [[ '==', '!=']],
            \ ]
" }}}

" python-mode {{{
" let g:pymode_python            = 'python2'
" let g:pymode_python              = 'python'
let g:pymode_options             = 0
let g:pymode_options_colorcolumn = 1
let g:pymode_virtualenv          = 1
let g:pymode_indent              = 0
let g:pymode_rope                = 0
let g:pymode_lint                = 1
let g:pymode_lint_cwindow        = 0
let g:pymode_lint_signs          = 0
let g:pymode_syntax_space_errors = 0
let g:pymode_trim_whitespaces    = 0
let g:pymode_debug               = 0
let g:pymode_rope                = 0
let g:pydoc_perform_mappings     = 0
" let g:pymode_lint_checkers       = ['pylint', 'pep8', 'mccabe']
let g:pymode_lint_checkers       = ['pep8']
" let g:pymode_lint_ignore       = "E501"

augroup autopep
    autocmd!
    au FileType python setlocal formatprg=autopep8\ -
augroup END
" }}}

" braceless {{{
augroup braceless
    autocmd!
    autocmd FileType python BracelessEnable +indent +fold +highlight
augroup END
let g:braceless_block_key = 'i'
" }}}

" yankmatches {{{
let g:YankMatches#ClipboardRegister='a'
nnoremap <silent><Leader>dm    :call ForAllMatches('delete', {})<CR>
nnoremap <silent><Leader>di    :call ForAllMatches('delete', {'inverse':1})<CR>
nnoremap <silent><Leader>ym    :call ForAllMatches('yank',   {})<CR>
nnoremap <silent><Leader>yi    :call ForAllMatches('yank',   {'inverse':1})<CR>
vnoremap <silent><Leader>dm    :<C-U>call ForAllMatches('delete', {'visual':1})<CR>
vnoremap <silent><Leader>di    :<C-U>call ForAllMatches('delete', {'visual':1, 'inverse':1})<CR>
vnoremap <silent><Leader>ym    :<C-U>call ForAllMatches('yank',   {'visual':1})<CR>
vnoremap <silent><Leader>yi    :<C-U>call ForAllMatches('yank',   {'visual':1, 'inverse':1})<CR>
" }}}

" git-messenger {{{
nnoremap <silent><Leader>gm <Plug>(git-messenger)
" }}}

" Doxygen {{{
let g:load_doxygen_syntax = 1
" }}}

" bubbly.nvim {{{
lua require("bubbly")
let g:bubbly_tabline = 0
" }}}

" barbar.nvim {{{
" Magic buffer-picking mode
nnoremap <silent><C-s> :BufferPick<CR>

" Sort automatically by...
" nnoremap <silent> <Space>bd :BufferOrderByDirectory<CR>
" nnoremap <silent> <Space>bl :BufferOrderByLanguage<CR>

" Move to previous/next
nnoremap <silent><Leader>h :BufferPrevious<CR>
nnoremap <silent><Leader>l :BufferNext<CR>

" Re-order to previous/next
nnoremap <silent><A-<> :BufferMovePrevious<CR>
nnoremap <silent><A->> :BufferMoveNext<CR>

" Goto buffer in position...
nnoremap <silent><Leader>1 :BufferGoto 1<CR>
nnoremap <silent><Leader>2 :BufferGoto 2<CR>
nnoremap <silent><Leader>3 :BufferGoto 3<CR>
nnoremap <silent><Leader>4 :BufferGoto 4<CR>
nnoremap <silent><Leader>5 :BufferGoto 5<CR>
nnoremap <silent><Leader>6 :BufferGoto 6<CR>
nnoremap <silent><Leader>7 :BufferGoto 7<CR>
nnoremap <silent><Leader>8 :BufferGoto 8<CR>
nnoremap <silent><Leader>9 :BufferLast<CR>

" Close buffer
nnoremap <silent>    <A-d> :BufferClose<CR>

let bufferline = {}

" Enable/disable animations
let bufferline.animation = v:true
" Enable/disable auto-hiding the tab bar when there is a single buffer
let bufferline.icons = "both"
let bufferline.maximum_padding = 0

" Configure icons on the bufferline.
let bufferline.icon_separator_active   = '▌'
let bufferline.icon_separator_inactive = '▌'
let bufferline.icon_close_tab          = 'x'
let g:bufferline.closable              = v:false
let g:bufferline.clickable             = v:false
let bufferline.icon_close_tab_modified = '●'
let bufferline.semantic_letters        = v:true

hi BufferCurrent           ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#1BB1E7  guibg=#383a4c      gui=italic
hi BufferCurrentMod        ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#ff0000  guibg=#383a4c      gui=NONE
hi BufferCurrentTarget     ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
hi BufferVisible           ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferVisibleMod        ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
hi BufferVisibleSign       ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferVisibleTarget     ctermfg=15      ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
hi BufferInactive          ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferInactiveMod       ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferInactiveSign      ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferInactiveTarget    ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
hi BufferTabLineSel        ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
hi BufferTabLineFill       ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE

hi BufferCurrentIndex      ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#ec7279  guibg=#383a4c      gui=NONE
hi BufferCurrentSign       ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#ec7279  guibg=#383a4c      gui=NONE
hi BufferVisibleIndex      ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
hi BufferInactiveIndex     ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#988C99  guibg=#383a4c      gui=NONE
" }}}

" vim-auto-cursorline {{{
" g:auto_cursorline_wait_ms = 1000
" }}}

" vim-anzu {{{
nmap n <Plug>(anzu-n-with-echo)
nmap N <plug>(anzu-N-with-echo)
nmap * <plug>(anzu-star-with-echo)
nmap # <plug>(anzu-sharp-with-echo)

" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)
" nmap * <Plug>(anzu-mode-star)
" nmap # <Plug>(anzu-mode-sharp)

" let g:anzu_status_format = "%p(%i/%l) %w"
" let g:anzu_status_format = "%#AnzuNormal#anzu%#AnzuArrow#➜ %#AnzuSearchObj#%p
"             \%#AnzuParen#(%#AnzuSearchCnt#%i%#AnzuSeparator#/%#AnzuSearchTotalCnt
"             \#%l%#AnzuParen#)%#None#"

let g:anzu_status_format = "%#AnzuSearchObj#%p%#AnzuParen#(%#AnzuSearchCnt#%i%#AnzuSeparator#/%#AnzuSearchTotalCnt
            \#%l%#AnzuParen#)%#None#"

" This command is an overridden one to make sure other one works if this plugin
" is disabled
nnoremap <silent><BS>  :nohlsearch<CR>\|<Plug>(anzu-clear-search-status)
" }}}

" vim-expand-region {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}

" Vim-licenses {{{
let g:licenses_copyright_holders_name = 'Ratheesh <ratheeshreddy@gmail.com>'
let g:licenses_authors_name           = 'Ratheesh S'
let g:licenses_default_commands       = ['gplv2', 'gpl', 'mit']
" }}}

" denite {{{

" reset 50% winheight on window resize
augroup deniteresize
    autocmd!
    autocmd VimResized,VimEnter * call denite#custom#option('default',
                \'winheight', winheight(0) / 3)
augroup end

call denite#custom#option('default', {
            \ 'prompt'                      : '➜ ',
            \ 'auto-accel'                  : v:true,
            \ 'auto-highlight'              : v:true,
            \ 'auto_resize'                 : 1,
            \ 'start_filter'                : v:false,
            \ 'source_names'                : 'short',
            \ 'mode'                        : 'normal',
            \ 'direction'                   : 'dynamicbottom',
            \ 'start-filter'                : v:true,
            \ 'empty'                       : v:false,
            \ 'reversed'                    : v:true,
            \ 'root-markers'                : '.git,.hg,.svn',
            \ 'smartcase'                   : v:true,
            \ 'statusline'                  : v:false,
            \ 'highlight_mode_normal'       : 'DeniteNormalHLLine',
            \ 'highlight-filter-background' : 'DeniteFloatWin',
            \ 'prompt_highlight'            : 'DenitePrompt',
            \ 'split'                       : 'horizontal',
            \ })

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr><CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr>d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr>p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr>q       denite#do_map('quit')
    nnoremap <silent><buffer><expr><Esc>   denite#do_map('quit')
    nnoremap <silent><buffer><expr>i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr>a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr><C-l>   denite#do_map('redraw')
    nnoremap <silent><buffer><expr><C-h>   denite#do_map('restore_sources')
    nnoremap <silent><buffer><expr><Space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr><Tab>   denite#do_map('choose_action')
endfunction

" Denite filter mappings
autocmd FileType denite-filter call s:denite_filter_settings()
function! s:denite_filter_settings() abort
    call deoplete#custom#buffer_option('auto_complete', v:false)
    imap <silent><buffer> <Esc> <Plug>(denite_filter_quit)
    nmap <silent><buffer> <Esc> <Plug>(denite_filter_quit)
endfunction

" Denite variables
call denite#custom#var('file/rec', 'command',
            \ ['rg', '--files', '--glob', '!.git', '--no-messages'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
            \ ['--hidden', '--vimgrep', '--no-heading', '-S'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Denite sources
"

nnoremap <silent><Leader>do   :<C-u>DeniteProjectDir -buffer-name=git -start-filter file/rec<CR>
nnoremap <silent><Leader>db   :<C-u>Denite buffer<CR>
nnoremap <silent><Leader>dd   :P<C-u>DeniteCursorWord grep<CR>
nnoremap <silent><Leader>d/   :P<C-u>DeniteProjectDir grep<CR>
nnoremap <silent><Leader>dp   :<C-u>Denite register<CR>
nnoremap <silent><Leader>dl   :<C-u>Denite location_list -no-empty<CR>
nnoremap <silent><Leader>du   :<C-u>Denite file_mru<CR>
nnoremap <silent><Leader>dy   :<C-u>Denite neoyank<CR>
nnoremap <silent><Leader>dr   :<C-u>Denite -resume<CR>
" nnoremap <silent><leader>ds   :<C-u>Denite history:search -mode=normal<CR>
" nnoremap <silent><leader>dc   :<C-u>Denite history:cmd -mode=normal<CR>

hi link deniteMatchedChar Special

" }}}

" vim-startify {{{

let g:startify_lists = [
            \ { 'type': 'files',     'header': ['   Files']            },
            \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
            \ { 'type': 'sessions',  'header': ['   Sessions']       },
            \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
            \ { 'type': 'commands',  'header': ['   Commands']       },
            \ ]

let g:startify_custom_header = get(g:, 'startify_custom_header', [
            \ "",
            \ "                     ________ ++     ________",
            \ "                    /        \\++++  /        \\",
            \ "                    \\        /++++++\\        /",
            \ "                     |      |++++++++/     /'",
            \ "                     |      |++++++/     /'",
            \ "                    +|      |++++/     /'+",
            \ "                  +++|      |++/     /'+++++",
            \ "                +++++|      |/     /'+++++++++",
            \ "                  +++|           /'+++++++++",
            \ "                    +|         /'+++++++++",
            \ "                     |       /'+++++++++",
            \ "                     |     /'+++++++++",
            \ "                     |   /'+++++++++",
            \ "                     `_/'   ++++++",
            \ "                              ++",
            \ ])

let g:startify_files_number=10
let g:startify_change_to_vcs_root=1

let g:startify_bookmarks = [
            \       {'c': '$HOME/.vim/vimrc' },
            \       {'g': '$HOME/.gitconfig' },
            \       {'s': '$HOME/.screenrc'  },
            \       {'t': '$HOME/.tmux.conf' },
            \       {'z': '$HOME/.zshrc'     },
            \ ]
" }}}

" vim-signify {{{
let g:signify_vcs_list               = [ 'git', 'svn' ]
let g:signify_realtime               = 0
let g:signify_update_on_bufenter     = 0
let g:signify_sign_add               = '+'
let g:signify_sign_delete            = '_'
let g:signify_sign_delete_first_line = '‾'
let g:signify_sign_change            = '='
let g:signify_sign_show_count        = 1
nmap <silent><leader>sn <plug>(signify-next-hunk)
nmap <silent><leader>sp <plug>(signify-prev-hunk)
" }}}

" vim-gitgutter {{{
let g:gitgutter_map_keys=0
let g:gitgutter_override_sign_column_highlight = 0
if exists('&signcolumn')  " Vim 7.4.2201
    if has('nvim')
        set signcolumn=auto
    else
        set signcolumn=yes
    endif " if nvim
else
    let g:gitgutter_sign_column_always = 1
endif

let g:gitgutter_max_signs = 1000
let g:gitgutter_eager     = 1 " Update when switching/writing buffers
let g:gitgutter_realtime  = 1
let g:gitgutter_diff_args = '--ignore-space-at-eol'
autocmd FileType tagbar,nerdtree setlocal signcolumn=no

let g:gitgutter_sign_modified = '='

nmap <silent><Leader>gn <Plug>(GitGutterNextHunk)
nmap <silent><Leader>gp <Plug>(GitGutterPrevHunk)
nmap <silent><Leader>ga <Plug>(GitGutterStageHunk)
nmap <silent><Leader>gr <Plug>(GitGutterRevertHunk)
nmap <silent><Leader>gu <Plug>(GitGutterUndoHunk)
nmap <silent><Leader>gP <Plug>(GitGutterPreviewHunk)

" textobj for hunks (i/a)h
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" }}}

" git-patch-tags {{{
augroup gitCommmit
    au!
    autocmd FileType gitcommit
                \  nmap <buffer> <LocalLeader>gs  <Plug>GitSignOff
                \| nmap <buffer> <LocalLeader>gt  <Plug>GitTested
                \| nmap <buffer> <LocalLeader>ga  <Plug>GitAck
                \| nmap <buffer> <LocalLeader>gc  <Plug>GitCC
                \| nmap <buffer> <LocalLeader>gr  <Plug>GitReviewed
                \| nmap <buffer> <LocalLeader>gR  <Plug>GitReporter
augroup END
" }}}

" devicons {{{
let g:webdevicons_enable                    = 1
let g:webdevicons_enable_startify           = 1
let g:webdevicons_enable_denite             = 0
let g:WebDevIconsOS                         = 'unix'
" }}}

" nvim-web-devicons {{{
hi IconNameDevicon          ctermfg=6       ctermbg=NONE    cterm=NONE     guifg=#EFEAD8  guibg=#383a4c      gui=NONE
" }}}

" vim-signature {{{
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkTextHL        = "SignColumn"
" }}}

" vim-smalls {{{
let g:smalls_auto_jump                  = 1
let g:smalls_auto_jump_min_input_length = 2
let g:smalls_auto_jump_timeout          = 0.3
nmap <Leader>j <Plug>(smalls)
omap <Leader>j <Plug>(smalls)
xmap <Leader>j <Plug>(smalls)
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger         = "<C-y>"
let g:UltiSnipsListSnippets          = "<C-Tab>"
let g:UltiSnipsJumpForwardTrigger    = "<Tab>"
let g:UltiSnipsJumpBackwardTrigger   = "<S-Tab>"
let g:indentLine_faster              = 1
let g:UltiSnipsEditSplit             = "vertical"
"}}}

" hipairs {{{
" let g:hiPairs_timeout=20
" let g:hiPairs_insert_timeout=20
" let g:hiPairs_stopline_more=200
let g:hiPairs_hl_matchPair = {
            \    'term'    : 'bold,underline',
            \    'ctermfg' : '24',
            \    'ctermbg' : 'NONE',
            \    'cterm'   : 'bold,underline',
            \    'guifg'   : '#008fff',
            \    'guibg'   : 'NONE',
            \    'gui'     : 'bold,underline',
            \ }

let g:hiPairs_hl_unmatchPair = {
            \    'term'    : 'bold,underline',
            \    'ctermfg' : 'NONE',
            \    'ctermbg' : '2',
            \    'cterm'   : 'bold,underline',
            \    'guifg'   : 'NONE',
            \    'guibg'   : '#f92a5b',
            \    'gui'     : 'bold,underline',
            \ }
" }}}

" vim-indentguides {{{
let g:indentguides_ignorelist = ['text', 'vim', 'python']
let g:indentguides_spacechar  = '┆'
let g:indentguides_tabchar    = '¦'
let g:indentguides_firstlevel = 0
" }}}

" hardtime {{{
let g:hardtime_default_on             = 0
let g:hardtime_timeout                = 2000
let g:hardtime_showmsg                = 1
let g:hardtime_ignore_buffer_patterns = ["NERD.*", "Tagbar.*"]
let g:hardtime_maxcount               = 2
" nnoremap <silent><leader>th           :HardTimeToggle<CR>
" }}}

" echodoc {{{
let g:echodoc#enable_at_startup      = 1
let g:echodoc#enable_force_overwrite = 1
let g:deoplete#_prev_completion      = 1
if has('nvim')
    if exists('*nvim_open_win')
        let g:echodoc#type="floating"
    else
        let g:echodoc#type="virtual"
    endif
else
    let g:echodoc#type="echo"
endif

let g:echodoc#highlight_identifier = "EchoDocFunc"
let g:echodoc#highlight_arguments  = "EchoDocParam"
let g:echodoc#highlight_trailing   = "EchoDocTrailing"
" }}}

" neovim_lspconfig {{{
lua require("lsp")
let g:completion_enable_snippet        = 'UltiSnips'
let g:completion_enable_fuzzy_match    = 1
let g:diagnostic_enable_virtual_text   = 1
let g:lsp_highlight_references_enabled = 1
" }}}

" tmux-complete.vim {{{
let g:tmuxcomplete#trigger = ''
" }}}

" deoplete {{{
let g:deoplete#enable_at_startup = 1
if !has('nvim')
    let g:deoplete#enable_yarp   = 1
endif
" let g:deoplete#file#enable_buffer_path      = 1
" let deoplete#tag#cache_limit_size           = 10000000
let g:deoplete#buffer#require_same_filetype = 0

            " \ 'skip_multibyte'      : v:false,
call deoplete#custom#option({
            \ 'auto_complete_delay' : 0,
            \ 'auto_refresh_delay'  : 50,
            \ 'auto_complete_popup' : 'auto',
            \ 'max_list'            : 100,
            \ 'ignore_case'         : v:false,
            \ 'smart_case'          : v:true,
            \ 'complete_method'     : 'omnifunc',
            \ 'min_pattern_length'  : 1,
            \ 'async_timeout'       : 500,
            \ 'refresh_always'      : v:false,
            \ 'refresh_backspace'   : v:true,
            \ 'nofile_complete_filetypes': ['denite-filter', 'zsh'],
            \ 'num_processes'       : 4,
            \ 'max_abbr_width'      : 0,
            \ 'max_menu_width'      : 50,
            \ })

call deoplete#custom#var('file', {
      \   'enable_buffer_path': 1,
      \ })

call deoplete#custom#option('candidate_marks',
      \ ['<F1>', '<F2>', '<F3>', '<F4>', '<F5>'])
inoremap <expr><F1> pumvisible() ? deoplete#insert_candidate(0) : '<F1>'
inoremap <expr><F2> pumvisible() ? deoplete#insert_candidate(1) : '<F2>'
inoremap <expr><F3> pumvisible() ? deoplete#insert_candidate(2) : '<F3>'
inoremap <expr><F4> pumvisible() ? deoplete#insert_candidate(3) : '<F4>'
inoremap <expr><F5> pumvisible() ? deoplete#insert_candidate(4) : '<F5>'

call deoplete#custom#option('refresh_always', v:true)
call deoplete#custom#option('num_processes', 0)

" Don't align these lines!
set pumheight=10 " set max. Height of popup menu

" let g:deoplete#sources  = {}
" let g:deoplete#sources_ = [] " includes all sources
call deoplete#custom#option('sources', {
            \ '_': [],
            \})

" Use partial fuzzy matches like YouCompleteMe
call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])
" call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])

" Disable the candidates in Comment/String syntaxes.
call deoplete#custom#source('_', 'disabled_syntaxes', ['Comment', 'String'])

call deoplete#custom#source('buffer'         , 'mark' , '[Buf]')
call deoplete#custom#source('clangx'         , 'mark' , '[CLang]')
call deoplete#custom#source('clang'          , 'mark' , '[CLang]')
" call deoplete#custom#source('LanguageClient' , 'mark' , '[LSP]')
call deoplete#custom#source('member'         , 'mark' , '[M]')
call deoplete#custom#source('function'       , 'mark' , '[Func]')

call deoplete#custom#source('_', 'sorters', ['sorter_mru', 'sorter_rank'])

call deoplete#custom#source('ultisnips'      , 'rank' , 9965)
call deoplete#custom#source('neosnippet'     , 'rank' , 9964)
call deoplete#custom#source('LanguageClient' , 'rank' , 9963)
call deoplete#custom#source('lsp'            , 'rank' , 9962)
call deoplete#custom#source('go'             , 'rank' , 9961)
call deoplete#custom#source('jedi'           , 'rank' , 9960)
call deoplete#custom#source('member'         , 'rank' , 9957)
call deoplete#custom#source('tag'            , 'rank' , 9955)
call deoplete#custom#source('clangx'         , 'rank' , 9954)
call deoplete#custom#source('clang'          , 'rank' , 9953)
call deoplete#custom#source('buffer'         , 'rank' , 9952)
call deoplete#custom#source('function'       , 'rank' , 9951)

call deoplete#custom#var('around', {
      \   'range_above'  : 500,
      \   'range_below'  : 500,
      \   'mark_above'   : '[↑]',
      \   'mark_below'   : '[↓]',
      \   'mark_changes' : '[*]',
      \ })

" autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-\> pumvisible() ? "\<C-w>" : "\<C-\>"
" inoremap <expr><Esc> pumvisible() ?deoplete#close_popup():"\<Esc>"

inoremap <expr><C-l>   pumvisible() ? deoplete#refresh() : "\<C-l>"
" Undo completion i.e remove whole completed word (default plugin mapping)
inoremap <expr><C-g> deoplete#undo_completion()

" endfunction"}}}

" Use Tab to forward cycle
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" use tab to backward cycle
inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
endfunction

" \ 'converter_remove_overlap',
" \ 'converter_truncate_abbr',
" \ 'converter_auto_delimiter',
" \ 'converter_truncate_menu',
" \ 'max_menu_width',
call deoplete#custom#source('_', 'converters', [
            \ 'converter_remove_paren',
            \ ])

" show doc strings for jedi
let g:deoplete#sources#jedi#show_docstring = 1
let g:deoplete#lsp#handler_enabled = v:false
call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })

" }}}

" vim-go {{
let g:go_highlight_build_constraints     = 1
let g:go_highlight_extra_types           = 1
let g:go_highlight_fields                = 1
let g:go_highlight_functions             = 1
let g:go_highlight_function_calls        = 1
let g:go_highlight_operators             = 1
let g:go_highlight_build_constraints     = 1
let g:go_highlight_generate_tags         = 1
let g:go_highlight_methods               = 1
let g:go_highlight_operators             = 1
let g:go_highlight_structs               = 1
let g:go_highlight_operators             = 1
let g:go_highlight_function_parameters   = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments  = 0
let g:go_auto_type_info                  = 1
let g:go_gocode_unimported_packages      = 1
let g:go_highlight_types                 = 1
let g:go_auto_type_info                  = 1
let g:go_echo_progress                   = 1
let g:go_echo_go_info                    = 1
let g:go_echo_command_info               = 1
let g:go_auto_sameids                    = 1
let g:go_snippet_engine                  = "ultisnips"
let g:go_auto_type_info                  = 1
let g:go_fmt_command                     = "goimports"
let g:go_updatetime                      = &updatetime
" }}}

" deoplete-go {{{
" for supporting completion of unimported packages issue
" $ gocode set unimported-packages true --> from shell
" let g:deoplete#sources#go#gocode_binary       = '$HOME./bin/gopls'
let g:deoplete#sources#jedi#show_docstring    = 1
let g:go_textobj_include_function_doc         = 1
let g:deoplete#sources#go#fallback_to_source  = 1
let g:deoplete#sources#go#unimported_packages = 1
let g:deoplete#sources#go#package_dot         = 0
let g:deoplete#sources#go#sort_class          = ['package', 'func', 'type', 'var', 'const']
" }}}

" vim-textobj-anyblock {{{
let g:textobj#anyblock#blocks = [ '(', '{', '[', '"', "'"]
" }}}

" vim-textmanip {{{
xmap <Leader>dj <Plug>(textmanip-duplicate-down)
nmap <Leader>dj <Plug>(textmanip-duplicate-down)
xmap <Leader>dk <Plug>(textmanip-duplicate-up)
nmap <Leader>dk <Plug>(textmanip-duplicate-up)
xmap <Leader>dl <Plug>(textmanip-duplicate-right)
xmap <Leader>dh <Plug>(textmanip-duplicate-left)

if has('nvim')
    xmap <M-j> <Plug>(textmanip-move-down)
    xmap <M-k> <Plug>(textmanip-move-up)
    xmap <M-h> <Plug>(textmanip-move-left)
    xmap <M-l> <Plug>(textmanip-move-right)
else
    xmap j <Plug>(textmanip-move-down)
    xmap k <Plug>(textmanip-move-up)
    xmap h <Plug>(textmanip-move-left)
    xmap l <Plug>(textmanip-move-right)
endif

" toggle insert/replace with <C-s>
nmap <C-s> <Plug>(textmanip-toggle-mode)
xmap <C-s> <Plug>(textmanip-toggle-mode)
" }}}

" line-number-interval {{{
if has('nvim')
    let g:line_number_interval#enable_at_startup = 1
    let g:line_number_interval = 5
    " let g:line_number_interval#use_custom = 1
endif " if
" }}}

" gundo {{{
let g:gundo_prefer_python3=1
let g:gundo_preview_bottom=1
let g:gundo_right=1
nnoremap <silent><Leader>u :GundoToggle<CR>
" }}}

" vim-smooth-scroll {{{
noremap <silent><c-u> :call smooth_scroll#up(&scroll, 50, 4)<CR>
noremap <silent><c-d> :call smooth_scroll#down(&scroll, 50, 4)<CR>
noremap <silent><c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent><c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
" }}}

" scratch {{{
" Enable data persistence across sessions
let g:scratch_persistence_file=1
let g:scratch_filetype = 'text'
" }}}

" vim-highlightedyank {{{
" NOTE: Enabling yankring plugin breaks this functionality!
nnoremap Y yy
let g:highlightedyank_highlight_duration=200
" }}}

" vim-shiny {{{
nmap p  <Plug>(shiny-p)
nmap P  <Plug>(shiny-P)
nmap gp <Plug>(shiny-gp)
nmap gP <Plug>(shiny-gP)
" }}}

" nerd-commentar {{{
let g:NERDCreateDefaultMappings  = 0
let g:NERDSpaceDelims            = 1
let g:NERDCompactSexyComs        = 1
let g:NERDDefaultAlign           = 'left'
" let g:NERDCustomDelimiters       = { 'c': { 'left': '/*','right': '*/' } }
let g:NERDCommentEmptyLines      = 1
let g:NERDTrimTrailingWhitespace = 1

if has('nvim')
    nnoremap <silent><M-;>  :call NERDComment("n", "Append")<CR>
else
    nnoremap <silent>;    :call NERDComment("n", "Append")<CR>
endif

nnoremap <silent><Leader>cc :call NERDComment("n", "Comment")<CR>
xnoremap <silent><Leader>cc :call NERDComment("x", "Comment")<CR>

nnoremap <silent><Leader>cu :call NERDComment("n", "Uncomment")<CR>
xnoremap <silent><Leader>cu :call NERDComment("x", "Uncomment")<CR>

nnoremap <silent><Leader>ci :call NERDComment("n", "Invert")<CR>
xnoremap <silent><Leader>ci :call NERDComment("x", "Invert")<CR>

nnoremap <silent><Leader>cs :call NERDComment("n", "Sexy")<CR>
xnoremap <silent><Leader>cs :call NERDComment("x", "Sexy")<CR>

nnoremap <silent><Leader>ct :call NERDComment("n", "Toggle")<CR>
xnoremap <silent><Leader>ct :call NERDComment("x", "Toggle")<CR>

" this does not work on ftypes that does not support multipart delimiters
nnoremap <silent><Leader>cm :call NERDComment("n", "Minimal")<CR>
xnoremap <silent><Leader>cm :call NERDComment("x", "Minimal")<CR>
" }}}

" vim-better-whitespace {{{
let g:better_whitespace_enabled     = 1
let g:strip_only_modified_lines     = 1
let g:strip_whitespace_on_save      = 1
let g:strip_whitespace_confirm      = 0
let g:show_spaces_that_precede_tabs = 1
let g:better_whitespace_filetypes_blacklist= ['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']
" }}}

" wstrip.vim {{{
let g:wstrip_auto      = 1
let g:wstrip_highlight = 1
" }}}

" lessspace {{{
let g:lessspace_enabled = 0
let g:lessspace_whitelist = ['c', 'cxx', 'cpp', 'python', 'vim']
" let g:lessspace_normal = 0
" }}}

" vim-expand-region {{{
map <C-l> <Plug>(expand_region_expand)
map <C-h> <Plug>(expand_region_shrink)
" }}}

" auto-pairs {{{
let g:AutoPairsFlyMode            = 1
let g:AutoPairsMultilineClose     = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'
" }}}

" vim-highlightedundo {{{
let g:highlightedundo#highlight_mode            = 2
let g:highlightedundo#highlight_duration_delete = 200
let g:highlightedundo#highlight_duration_add    = 250
" PS: Keybindings of this plugin are moved to
" $VIMRC/after/plugin/vim-highlightedundo as they are overridden by
" vim-endwise keybindings
" }}}

" vim-sandwich {{{
let g:operator#sandwich#highlight_duration=200
runtime macros/sandwich/keymap/surround.vim
let g:sandwich#recipes += [
      \   {'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1,
      \    'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']},
      \
      \   {'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1,
      \    'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']},
      \
      \   {'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1,
      \    'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']},
      \
      \   {'buns': ['{\s*', '\s*}'],   'nesting': 1, 'regex': 1,
      \    'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'],
      \    'action': ['delete'], 'input': ['{']},
      \
      \   {'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1,
      \    'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'],
      \    'action': ['delete'], 'input': ['[']},
      \
      \   {'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1,
      \    'match_syntax': 1, 'kind': ['delete', 'replace', 'textobj'],
      \    'action': ['delete'], 'input': ['(']},
      \ ]
" }}}

" vim-pencil {{{
let g:pencil#autoformat      = 0     " 0 = disable, 1 = enable (def)
let g:pencil#textwidth       = 80
let g:pencil#cursorwrap      = 0     " 0 = disable, 1 = enable (def)
let g:pencil#mode_indicators = {'hard': 'H', 'auto': 'A', 'soft': 'S', 'off': '',}

augroup pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init({'wrap': 'hard'})
    autocmd FileType text call pencil#init({'wrap': 'hard'})
augroup END

" manual reformatting shortcuts
nnoremap Q gqap<CR>
xnoremap Q gq<CR>
nnoremap <silent><leader>Q vapJgqap<CR>
" }}}

" vim-textobj-quote {{{
augroup textobj_quote
    autocmd!
    autocmd FileType markdown call textobj#quote#init()
    autocmd FileType textile call textobj#quote#init()
    autocmd FileType text call textobj#quote#init({'educate': 0})
augroup END
" }}}

" vim-argumentative {{{
let g:argumentative_no_mappings=1

" custom mappings
nmap <a <Plug>Argumentative_MoveLeft
nmap >a <Plug>Argumentative_MoveRight
xmap ia <Plug>Argumentative_InnerTextObject
xmap aa <Plug>Argumentative_OuterTextObject
omap ia <Plug>Argumentative_OpPendingInnerTextObject
omap aa <Plug>Argumentative_OpPendingOuterTextObject
" }}}

" vim-easy-align {{{
let g:easy_align_bypass_fold = 1
nmap ga     <Plug>(EasyAlign)
xmap ga     <Plug>(EasyAlign)
xmap <M-BS> <plug>(LiveEasyAlign)
let g:easy_align_interactive_modes = ['l', 'r']
let g:easy_align_bang_interactive_modes = ['c', 'r']
let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}


" vim-visual-increment {{{
set nrformats=alpha,octal,hex
" }}}

" oscyank {{{
noremap <leader>y :Oscyank<CR>
" }}}

" vim-table-mode {{{
let g:table_mode_corner_corner='+'
" }}}

" wilder {{{
if has('nvim')
    call wilder#enable_cmdline_enter()
    cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
    cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
    set wildcharm=<Tab>

    " Enable cmdline completion (for Neovim only)
    call wilder#set_option('modes', ['/', '?', ':', '-'])

    let s:wilder_show_history = 0
    function! s:wilder_toggle_history() abort
        let s:wilder_show_history = 1 - s:wilder_show_history
        call timer_start(0, {-> feedkeys("\<BS>")})
        " return space which is then deleted by the <BS> to trigger CmdlineChanged
        return ' '
    endfunction
    cmap <expr> <C-F> wilder#in_context() ? <SID>wilder_toggle_history() : "\<C-F>"

    call wilder#set_option('pipeline', [
          \    wilder#branch(
          \     [
          \       wilder#check({-> s:wilder_show_history}),
          \       wilder#history(100),
          \       {ctx, xs -> filter(xs, {i, x -> match(x, ctx.input) != -1})},
          \     ],
          \     [
          \       wilder#check({_, x -> empty(x)}),
          \       wilder#history(100),
          \     ],
          \     wilder#substitute_pipeline({
          \       'fuzzy':1,
          \       'use_python':1,
          \     }),
          \     wilder#cmdline_pipeline({
          \       'fuzzy': 1,
          \       'use_python': 1,
          \     }),
          \     wilder#python_search_pipeline({
          \       'regex': 'fuzzy',
          \       'engine': 're',
          \       'sort': function('wilder#python_sort_difflib'),
          \     }),
          \     ),
          \  ])

    let s:status_hl       = wilder#make_hl('WilderStatus'  , 'WildStatus')
    let s:mode_hl         = wilder#make_hl('WilderMode'    , 'WildMode')
    let s:index_hl        = wilder#make_hl('WilderIndex'   , 'airline_z')
    let s:sep_hl          = wilder#make_hl('WilderSep'     , 'WildSeparator')
    let s:selected_hl     = wilder#make_hl('WilderSelected', 'WildSelected')
    let s:accent_hl       = wilder#make_hl('WilderAccent'  , 'WildAccent')
    let s:select_acc_hl   = wilder#make_hl('WilderSelectedAccent', 'WildSelectedAccent')

    function! s:wilder_adjust_cmdmode(cmd) abort
        let l:modestr = a:cmd ==# ':' ? ' Kommand' : ' Suche'
        return join([l:modestr , s:wilder_show_history ==# 1 ? '★' : ''], '')
    endfunction

    call wilder#set_option('renderer', wilder#wildmenu_renderer({
          \ 'spinner': [wilder#spinner({
          \   'frames'   : '-\|/',
          \   'done'     : ' ',
          \   'delay'    : 50,
          \   'interval' : 100,
          \ }),
          \ ],
          \ 'highlights': {
          \   'default'         : s:status_hl,
          \   'selected'        : s:selected_hl,
          \   'accent'          : s:accent_hl,
          \   'select_accent'   : s:select_acc_hl,
          \ },
          \ 'apply_highlights' : wilder#query_common_subsequence_spans(),
          \ 'separator'        : ' • ',
          \ 'separator_hl'     : s:sep_hl,
          \ 'hl'               : s:status_hl,
          \ 'ellipsis'         : '...',
          \ 'left': [
          \    {'value': [{-> s:wilder_adjust_cmdmode(getcmdtype())}, wilder#spinner()], 'hl': s:mode_hl},
          \    wilder#separator('', s:mode_hl, s:status_hl, 'left'), ' ',
          \ ],
          \ 'right': [
          \    ' ', wilder#separator('', s:index_hl, s:status_hl, 'right'),
          \    wilder#index({'hl': s:index_hl}),
          \ ],
          \ }))
endif
" }}}

" vim-matchup {{{
let b:matchup_matchparen_enabled = 0
" }}}

" vim-submode {{{
let g:submode_always_show_submode = 1
let g:submode_keyseqs_to_leave    = ['<Esc>']
let g:submode_timeout             = 0

" Submode for Gitgutter plugin -> navigate next/prev hunk using j/k keys
call submode#enter_with('git-gutter', 'n', 'r', '<leader>gn', '<Plug>(GitGutterNextHunk)')
call submode#enter_with('git-gutter', 'n', 'r', '<leader>gp', '<Plug>(GitGutterPrevHunk)')
call submode#leave_with('git-gutter', 'n', '', '<Esc>')
call submode#map('git-gutter', 'n', 'r', 'j', '<Plug>(GitGutterNextHunk)')
call submode#map('git-gutter', 'n', 'r', 'k', '<Plug>(GitGutterPrevHunk)')
call submode#map('git-gutter', 'n', 'r', '.', '.')

" Submode for undo/redo with g-/+ -> use -/= to undo and redo
call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map('undo/redo', 'n', '', '-', 'g-')
call submode#map('undo/redo', 'n', '', '=', 'g+')

" Submode for textmanip plugin(visual mode) for moving line/region with h/j/k/l
call submode#enter_with('textmanip', 'x', 'r', '<M-j>', '<Plug>(textmanip-move-down)')
call submode#enter_with('textmanip', 'x', 'r', '<M-k>', '<Plug>(textmanip-move-up)')
call submode#enter_with('textmanip', 'x', 'r', '<M-h>', '<Plug>(textmanip-move-left)')
call submode#enter_with('textmanip', 'x', 'r', '<M-l>', '<Plug>(textmanip-move-right)')
call submode#leave_with('textmanip', 'x', '', '<Esc>')
call submode#map('textmanip', 'x', 'r', 'j', '<Plug>(textmanip-move-down)')
call submode#map('textmanip', 'x', 'r', 'k', '<Plug>(textmanip-move-up)')
call submode#map('textmanip', 'x', 'r', 'h', '<Plug>(textmanip-move-left)')
call submode#map('textmanip', 'x', 'r', 'l', '<Plug>(textmanip-move-right)')

" Submode for switching buffers. Use h/l to navigate between neighboring buffers
" call submode#enter_with('buf-nav', 'n', 'r', '<leader>h', '<Plug>AirlineSelectPrevTab')
" call submode#enter_with('buf-nav', 'n', 'r', '<leader>l', '<Plug>AirlineSelectNextTab')
" call submode#leave_with('buf-nav', 'n', '', '<Esc>')
" call submode#map('buf-nav', 'n', 'r', 'h', '<Plug>AirlineSelectPrevTab')
" call submode#map('buf-nav', 'n', 'r', 'l', '<Plug>AirlineSelectNextTab')

" Submode for navigating marks. Use j/k to navigate between marks
call submode#enter_with('marks', 'n', 'r', '<leader>mn', ']`')
call submode#enter_with('marks', 'n', 'r', '<leader>mp', '[`')
call submode#leave_with('marks', 'n', '', '<Esc>')
call submode#map('marks', 'n', 'r', 'j', ']`')
call submode#map('marks', 'n', 'r', 'k', '[`')
"}}}

" vim-textobj-parameter {{{
let g:vim_textobj_parameter_mapping = 'a'
" }}}

" vim-peekaboo {{{
let g:peekaboo_window='vert bo 60new'
" }}}

" Misc useful functions {{{
" bracketed-paste settings - supports only ViM for now
if !has('nvim') && has('patch-8.0-330')
    if &term =~ "xterm.*"
        let &t_SI = &t_SI . "\<ESC>[?2004h"
        let &t_EI = "\<ESC>[?2004l" . &t_EI
        function! XTermPasteBegin(ret)
            set pastetoggle=<Esc>[201~
            set paste
            return a:ret
        endfunction
        map  <expr><Esc>[200~ XTermPasteBegin("i")
        imap <expr><Esc>[200~ XTermPasteBegin("")
        vmap <expr><Esc>[200~ XTermPasteBegin("c")
        cmap <expr><Esc>[200~ <nop>
        cmap <expr><Esc>[201~ <nop>
    endif
endif

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ft=%s ff=%s ts=%d sw=%d tw=%d %sexpandtab:",
                \ &filetype, &fileformat, &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" Toggle locationlist and quickfix list
function! GetBufferList()
    redir =>buflist
    silent! ls!
    redir END
    return buflist
endfunction

function! ToggleList(bufname, pfx)
    let buflist = GetBufferList()
    for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
            exec(a:pfx.'close')
            return
        endif
    endfor
    if a:pfx == 'l' && len(getloclist(0)) == 0
        echohl ErrorMsg
        echo "Location List is Empty."
        return
    endif
    let winnr = winnr()
    exec(a:pfx.'open')
    if winnr() != winnr
        wincmd p
    endif
endfunction

" }}}

" Misc macros {{{
" Print syntax highlight group for the word under cursor in command area
nnoremap <F3> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}

" Use guicolors in terminal (we need to place this here as it is easy to disable!)
if has("termguicolors")
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
else
    echom "24Bit colors are not supported in this ViM!"
endif

if has('nvim')
    " Set cursor color based on mode. Though this is limited compared to cursor
    " mode, this setting does not break locationlist/preview window title issue
    " with airline plugin.
    " Only neovim support for now!
    highlight nCursor guifg=#e0e0e0 guibg=#e0e0e0 gui=bold cterm=bold
    highlight iCursor guifg=#ff5555 guibg=#ff5555 gui=bold cterm=bold
    highlight vCursor guifg=#1bb1e7 guibg=#1bb1e7 gui=bold cterm=bold
    highlight rCursor guifg=#d65b84 guibg=#d65b84 gui=bold cterm=bold
    highlight oCursor guifg=#00ff00 guibg=#00ff00 gui=bold cterm=bold
    set guicursor=n:block-nCursor-blinkon0,i-ci:ver20-iCursor-blinkon0,v-ve:block-vCursor-blinkon0,o:hor30-oCursor-blinkon0,r-cr:block-rCursor-blinkon0
    autocmd VimLeave * set guicursor=a:block-NCursor-blinkon0
endif

let g:surround_42 = "/* \r */"
let g:surround_{char2nr("q")} = "“\r”"

" End of File
